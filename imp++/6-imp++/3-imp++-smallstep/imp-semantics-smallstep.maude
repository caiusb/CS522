mod IMP-CONFIGURATIONS-SMALLSTEP is including IMP-DESUGARED-SYNTAX + STATE .

  including BUFFER .

  sorts Configuration ExtendedConfiguration .
  subsort Configuration < ExtendedConfiguration .
  op <_,_,_> : AExp State Buffer -> Configuration .
  op <_,_,_> : BExp State Buffer -> Configuration .
  op <_,_,_,_> : Stmt State Buffer Buffer -> Configuration .
  op <_> : Pgm -> Configuration . --- backwards compatibilty
  op <_,_> : Pgm State -> Configuration . 

  op <`error`,_,_> : State Buffer -> Configuration . --- error
  op <`halting`,_,_,_> : State Buffer Buffer -> Configuration .

  op o_ : Configuration -> ExtendedConfiguration [prec 80] .   --- one step
  op *_ : Configuration -> ExtendedConfiguration [prec 80] .   --- all steps
  var Cfg Cfg' : Configuration .
 crl * Cfg => * Cfg' if o Cfg => Cfg' .
endm

mod IMP-SEMANTICS-SMALLSTEP is including IMP-CONFIGURATIONS-SMALLSTEP .
  var X : Id .  var Sigma Sigma' : State .  var I I1 I2 : Int .  var Xl : List{Id} .
  var A A' A1 A1' A2 A2' : AExp .  var B B' B1 B1' B2 : BExp .  var S S' S1 S1' S2 : Stmt .
  var P : Pgm .
  var OmegaIn OmegaIn' OmegaIn'' OmegaOut OmegaOut' OmegaOut'' : Buffer .

--- lookup
 crl o < X,Sigma,OmegaIn > => < Sigma(X),Sigma,OmegaIn > if Sigma(X) =/=Bool undefined .

--- add
 crl o < A1 + A2,Sigma,OmegaIn > => < A1' + A2,Sigma',OmegaIn' > if o < A1,Sigma,OmegaIn > => < A1',Sigma',OmegaIn' > .
 crl o < A1 + A2,Sigma,OmegaIn > => < A1 + A2',Sigma',OmegaIn' > if o < A2,Sigma,OmegaIn > => < A2',Sigma',OmegaIn' > .
  rl o < I1 + I2,Sigma,OmegaIn > => < I1 +Int I2,Sigma,OmegaIn > .
 crl o < A1 + A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > if o < A1,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 crl o < A1 + A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > if o < A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .

--- div
 crl o < A1 / A2,Sigma,OmegaIn > => < A1' / A2,Sigma',OmegaIn' > if o < A1,Sigma,OmegaIn > => < A1',Sigma',OmegaIn' > .
 crl o < A1 / A2,Sigma,OmegaIn > => < A1 / A2',Sigma',OmegaIn' > if o < A2,Sigma,OmegaIn > => < A2',Sigma',OmegaIn' > .
 crl o < I1 / I2,Sigma,OmegaIn > => < I1 /Int I2,Sigma,OmegaIn > if I2 =/=Bool 0 .
 crl o < A1 / A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > if o < A1,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 crl o < A1 / A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > if o < A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
  rl o < I1 / 0,Sigma,OmegaIn > => < error,Sigma,OmegaIn > .

--- less than
 crl o < A1 <= A2,Sigma,OmegaIn > => < A1' <= A2,Sigma',OmegaIn' > if o < A1,Sigma,OmegaIn > => < A1',Sigma',OmegaIn' > .
 crl o < I1 <= A2,Sigma,OmegaIn > => < I1 <= A2',Sigma',OmegaIn' > if o < A2,Sigma,OmegaIn > => < A2',Sigma',OmegaIn' > .
  rl o < I1 <= I2,Sigma,OmegaIn > => < I1 <=Int I2,Sigma,OmegaIn > .
  crl o < A1 <= A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > if o < A1,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
  crl o < A1 <= A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > if o < A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .

--- negation
 crl o < ! B,Sigma,OmegaIn > => < ! B',Sigma',OmegaIn' > if o < B,Sigma,OmegaIn > => < B',Sigma',OmegaIn' > .
  rl o < ! true,Sigma,OmegaIn > => < false,Sigma,OmegaIn > .
  rl o < ! false,Sigma,OmegaIn > => < true,Sigma,OmegaIn > .
 crl o < ! B,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > if o < B,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .

--- and
 crl o < B1 && B2,Sigma,OmegaIn > => < B1' && B2,Sigma',OmegaIn' > if o < B1,Sigma,OmegaIn > => < B1',Sigma',OmegaIn' > .
  rl o < false && B2,Sigma,OmegaIn > => < false,Sigma,OmegaIn > .
  rl o < true && B2,Sigma,OmegaIn > => < B2,Sigma,OmegaIn > .
 crl o < B1 && B2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > if o < B1,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 crl o < true && B2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > if o < B2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .

--- increment
 crl o < ++ X,Sigma,OmegaIn > => < Sigma(X) +Int 1,Sigma[(Sigma(X) +Int 1) / X],OmegaIn > if Sigma(X) =/=Bool undefined .

--- read & print
  rl o < read(), Sigma, I : OmegaIn > => < I,Sigma,OmegaIn > .
 crl o < print(A);,Sigma,OmegaIn,OmegaOut > => < print(A');,Sigma',OmegaIn',OmegaOut > if o < A,Sigma,OmegaIn > => < A',Sigma',OmegaIn' > .
  rl o < print(I);,Sigma,OmegaIn,OmegaOut > => < {},Sigma,OmegaIn,OmegaOut : I > .

--- block
  rl o < {S},Sigma,OmegaIn,OmegaOut > => < S,Sigma,OmegaIn,OmegaOut > .

--- assignment
 crl o < X = A ;,Sigma,OmegaIn,OmegaOut > => < X = A' ;,Sigma',OmegaIn',OmegaOut > if o < A,Sigma,OmegaIn > => < A',Sigma',OmegaIn' > .
 crl o < X = I ;,Sigma,OmegaIn,OmegaOut > => < {},Sigma[I / X],OmegaIn,OmegaOut > if Sigma(X) =/=Bool undefined .
 crl o < X = A ;,Sigma,OmegaIn,OmegaOut > => < halting,Sigma',OmegaIn',OmegaOut > if o < A,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .

--- statement concat
 crl o < S1 S2,Sigma,OmegaIn,OmegaOut > => < S1' S2,Sigma',OmegaIn',OmegaOut' > if o < S1,Sigma,OmegaIn,OmegaOut > => < S1',Sigma',OmegaIn',OmegaOut' > .
  rl o < {} S2,Sigma,OmegaIn,OmegaOut > => < S2,Sigma,OmegaIn,OmegaOut > .
 crl o < S1 S2,Sigma,OmegaIn,OmegaOut > => < halting,Sigma',OmegaIn',OmegaOut' > if o < S1,Sigma,OmegaIn,OmegaOut > => < halting,Sigma',OmegaIn',OmegaOut' > .

--- if
 crl o < if (B) S1 else S2,Sigma,OmegaIn,OmegaOut > => < if (B') S1 else S2,Sigma',OmegaIn',OmegaOut >
  if o < B,Sigma,OmegaIn > => < B',Sigma',OmegaIn' > .
  rl o < if (true) S1 else S2,Sigma,OmegaIn,OmegaOut > => < S1,Sigma,OmegaIn,OmegaOut > .
  rl o < if (false) S1 else S2,Sigma,OmegaIn,OmegaOut > => < S2,Sigma,OmegaIn,OmegaOut > .
 crl o < if (B) S1 else S2,Sigma,OmegaIn,OmegaOut > => < halting,Sigma',OmegaIn',OmegaOut > if o < B,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .

--- while
  rl o < while (B) S,Sigma,OmegaIn,OmegaOut > => < if (B) {S while (B) S} else {},Sigma,OmegaIn,OmegaOut > .

--- halt
  rl o < halt ;,Sigma,OmegaIn,OmegaOut > => < halting,Sigma,OmegaIn,OmegaOut > .

--- program
  rl o < P > => < P, .State > . --- backward compatibility
  rl o < P, Sigma > => < P, Sigma, epsilon, epsilon > . --- backward compatibility

--- let
 crl o < let X = A in S,Sigma,OmegaIn,OmegaOut > => < let X = A' in S,Sigma',OmegaIn',OmegaOut > if o < A,Sigma,OmegaIn > => < A',Sigma',OmegaIn' > .
 crl o < let X = I in S,Sigma,OmegaIn,OmegaOut > => < let X = Sigma'(X) in S',Sigma'[Sigma(X) / X],OmegaIn',OmegaOut' >
  if o < S,Sigma[I / X],OmegaIn,OmegaOut > => < S',Sigma',OmegaIn',OmegaOut' > .
  rl o < let X = I in {},Sigma,OmegaIn,OmegaOut > => < {},Sigma,OmegaIn,OmegaOut > .
 crl o < let X = A in S,Sigma,OmegaIn,OmegaOut > => < halting,Sigma',OmegaIn',OmegaOut > if o < A,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 crl o < let X = I in S,Sigma,OmegaIn,OmegaOut > => < halting,Sigma',OmegaIn',OmegaOut' >
  if o < S,Sigma[I / X],OmegaIn,OmegaOut > => < halting,Sigma',OmegaIn',OmegaOut' > .

endm
