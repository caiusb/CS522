mod IMP-CONFIGURATIONS-BIGSTEP is including IMP-DESUGARED-SYNTAX + STATE .

  including BUFFER .

  sort Configuration .
  op <_,_,_> : AExp State Buffer -> Configuration . --- input
  op <_,_,_> : BExp State Buffer -> Configuration . --- input
  op <_,_,_> : Stmt State Buffer -> Configuration . --- output
  op <_,_,_> : State Buffer Buffer -> Configuration . --- input and output
  op   <_,_> : Pgm Buffer -> Configuration . --- input
  op   <_>   : Pgm -> Configuration . --- so I don't have to change all the tests
  op   <_,_> : Stmt State -> Configuration . --- idem 

  ---for halting
  op <`error`,_,_> : State Buffer -> Configuration .
  op <`halting`,_,_,_> : State Buffer Buffer -> Configuration .
endm

mod IMP-SEMANTICS-BIGSTEP is including IMP-CONFIGURATIONS-BIGSTEP .
  var X : Id .  var Xl : List{Id} .  var Sigma Sigma' Sigma'' Sigma1 Sigma2 : State .
  var I I1 I2 : Int .  var T : Bool .
  var A A1 A2 : AExp .  var B B1 B2 : BExp .  var S S1 S2 : Stmt .
  var P : Pgm .
  var OmegaIn OmegaIn' OmegaIn'' OmegaOut OmegaOut' OmegaOut'' : Buffer .

 crl < X,Sigma,OmegaIn > => < Sigma(X),Sigma,OmegaIn >
  if Sigma(X) =/=Bool undefined .
 crl < A1 + A2,Sigma,OmegaIn > => < I1 +Int I2,Sigma2,OmegaIn'' > 
  if < A1,Sigma,OmegaIn > => < I1,Sigma1,OmegaIn' > /\ < A2,Sigma1,OmegaIn' > => < I2,Sigma2,OmegaIn'' > .
 crl < A1 + A2,Sigma,OmegaIn > => < I1 +Int I2,Sigma1,OmegaIn'' >
  if < A2,Sigma,OmegaIn > => < I2,Sigma2,OmegaIn' > /\ < A1,Sigma2,OmegaIn' > => < I1,Sigma1,OmegaIn'' > .
 crl < A1 + A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' >
  if < A1,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 crl < A1 + A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' >
  if < A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .

 crl < A1 / A2,Sigma,OmegaIn > => < I1 /Int I2,Sigma2,OmegaIn'' >
  if < A1,Sigma,OmegaIn > => < I1,Sigma1,OmegaIn' > /\ < A2,Sigma1,OmegaIn' > => < I2,Sigma2,OmegaIn'' > /\ I2 =/=Bool 0 .
 crl < A1 / A2,Sigma,OmegaIn > => < I1 /Int I2,Sigma1,OmegaIn'' >
  if < A2,Sigma,OmegaIn > => < I2,Sigma2,OmegaIn' > /\ < A1,Sigma2,OmegaIn' > => < I1,Sigma1,OmegaIn'' > /\ I2 =/=Bool 0 .
 crl < A1 / A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' >
  if < A1,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 crl < A1 / A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' >
  if < A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 crl < A1 / A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' >
  if < A2,Sigma,OmegaIn > => < 0,Sigma',OmegaIn' > .

 crl < A1 <= A2,Sigma,OmegaIn > => < I1 <=Int I2,Sigma2,OmegaIn'' > 
  if < A1,Sigma,OmegaIn > => < I1,Sigma1,OmegaIn' > /\ < A2,Sigma1,OmegaIn' > => < I2,Sigma2,OmegaIn'' > .
 crl < A1 <= A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' >
  if < A1,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 crl < A1 <= A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' >
  if < A2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .

 crl < ! B,Sigma,OmegaIn > => < false,Sigma',OmegaIn' > 
  if < B,Sigma,OmegaIn > => < true,Sigma',OmegaIn' > .
 crl < ! B,Sigma,OmegaIn > => <  true,Sigma',OmegaIn' > 
  if < B,Sigma,OmegaIn > => < false,Sigma',OmegaIn' > .
 crl < ! B,Sigma,OmegaIn > => < error,Sigma',OmegaIn' >
  if < B,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .

 crl < B1 && B2,Sigma,OmegaIn > => < false,Sigma1,OmegaIn' > 
  if < B1,Sigma,OmegaIn > => < false,Sigma1,OmegaIn' > .
 crl < B1 && B2,Sigma,OmegaIn > => < T,Sigma2,OmegaIn'' > 
  if < B1,Sigma,OmegaIn > => < true,Sigma1,OmegaIn' > /\ < B2,Sigma1,OmegaIn' > => < T,Sigma2,OmegaIn'' > .
 crl < B1 && B2,Sigma,OmegaIn > => < error,Sigma',OmegaIn' >
  if < B1,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 crl < B1 && B2,Sigma,OmegaIn > => < error,Sigma'',OmegaIn' >
  if < B1,Sigma,OmegaIn > => < true,Sigma',OmegaIn' > /\ < B2,Sigma',OmegaIn' > => < error,Sigma'',OmegaIn' > .

  rl < {},Sigma,OmegaIn > => < Sigma,OmegaIn,epsilon > .
 crl < {S},Sigma,OmegaIn > => < Sigma',OmegaIn',OmegaOut' >
  if < S,Sigma,OmegaIn > => < Sigma',OmegaIn',OmegaOut' > .
 crl < {S},Sigma,OmegaIn > => < halting,Sigma',OmegaIn',OmegaOut' >
  if < S,Sigma,OmegaIn > => < halting,Sigma',OmegaIn',OmegaOut' > .

 crl < X = A ;,Sigma,OmegaIn > => < Sigma'[I / X],OmegaIn',epsilon >
  if < A,Sigma,OmegaIn > => < I,Sigma',OmegaIn' > /\ Sigma(X) =/=Bool undefined .
 crl < X = A ;,Sigma,OmegaIn > => < halting,Sigma',OmegaIn,epsilon >
  if < A,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .

 crl < S1 S2,Sigma,OmegaIn > => < Sigma2,OmegaIn'',OmegaOut' : OmegaOut'' >
  if < S1,Sigma,OmegaIn > => < Sigma1,OmegaIn',OmegaOut' > /\ < S2,Sigma1,OmegaIn' > => < Sigma2,OmegaIn'',OmegaOut'' > .
 crl < S1 S2,Sigma,OmegaIn > => < halting,Sigma',OmegaIn',OmegaOut' >
  if < S1,Sigma,OmegaIn > => < halting,Sigma',OmegaIn',OmegaOut' > .
 crl < S1 S2,Sigma,OmegaIn > => < halting,Sigma'',OmegaIn'',OmegaOut' : OmegaOut'' >
  if < S1,Sigma,OmegaIn > => < Sigma',OmegaIn',OmegaOut' > /\ < S2,Sigma',OmegaIn' > => < halting,Sigma'',OmegaIn'',OmegaOut'' > .

 crl < if (B) S1 else S2,Sigma,OmegaIn > => < Sigma1,OmegaIn'',OmegaOut > 
  if < B,Sigma,OmegaIn > => < true,Sigma',OmegaIn' > /\ < S1,Sigma',OmegaIn' > => < Sigma1,OmegaIn'',OmegaOut > .
 crl < if (B) S1 else S2,Sigma,OmegaIn > => < Sigma2,OmegaIn'',OmegaOut > 
  if < B,Sigma,OmegaIn > => < false,Sigma',OmegaIn' > /\ < S2,Sigma',OmegaIn' > => < Sigma2,OmegaIn'',OmegaOut > .
 crl < if (B) S1 else S2,Sigma,OmegaIn > => < halting,Sigma',OmegaIn',epsilon >
  if < B,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 crl < if (B) S1 else S2,Sigma,OmegaIn > => < halting,Sigma'',OmegaIn'',OmegaOut >
  if < B,Sigma,OmegaIn > => < true,Sigma',OmegaIn' > /\ < S1,Sigma',OmegaIn' > => < halting,Sigma'',OmegaIn'',OmegaOut > .
 crl < if (B) S1 else S2,Sigma,OmegaIn > => < halting,Sigma'',OmegaIn'',OmegaOut >
  if < B,Sigma,OmegaIn > => < false,Sigma',OmegaIn' > /\ < S2,Sigma',OmegaIn' > => < halting,Sigma'',OmegaIn'',OmegaOut > .

 crl < while (B) S,Sigma,OmegaIn > => < Sigma',OmegaIn',epsilon >
  if < B,Sigma,OmegaIn > => < false,Sigma',OmegaIn' > .
 crl < while (B) S,Sigma,OmegaIn > => < Sigma'',OmegaIn'',OmegaOut > 
  if < B,Sigma,OmegaIn > => < true,Sigma',OmegaIn' > /\ < S while (B) S,Sigma',OmegaIn' > => < Sigma'',OmegaIn'',OmegaOut > .
 crl < while (B) S,Sigma,OmegaIn > => < halting,Sigma',OmegaIn',epsilon >
  if < B,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 crl < while (B) S,Sigma,OmegaIn > => < halting,Sigma'',OmegaIn'',OmegaOut > 
  if < B,Sigma,OmegaIn > => < true,Sigma',OmegaIn' > /\ < S while (B) S, Sigma',OmegaIn' > => < halting,Sigma'',OmegaIn'',OmegaOut > .

 crl < print(A1) ;,Sigma,OmegaIn > => < Sigma',OmegaIn',I1 >
  if < A1,Sigma,OmegaIn > => < I1,Sigma',OmegaIn' > .
 crl < print(A1) ;,Sigma,OmegaIn > => < halting,Sigma',OmegaIn',epsilon >
  if < A1,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
 
 crl < spawn S,Sigma,OmegaIn > => < Sigma',OmegaIn',OmegaOut >
  if < S,Sigma,OmegaIn > => < Sigma',OmegaIn',OmegaOut > .
 crl < (spawn S1) S2,Sigma,OmegaIn > => < Sigma'',OmegaIn'',OmegaOut' : OmegaOut >
  if < S2,Sigma,OmegaIn > => < Sigma',OmegaIn',OmegaOut > /\ < S1,Sigma',OmegaIn' > => < Sigma'',OmegaIn'',OmegaOut' > .

  rl < read(),Sigma,I : OmegaIn > => < I,Sigma,OmegaIn > .

 crl < ++ X,Sigma,OmegaIn > => < Sigma(X) +Int 1,Sigma[(Sigma(X) +Int 1) / X],OmegaIn >
  if Sigma(X) =/=Bool undefined .
  rl < halt ;,Sigma,OmegaIn > => < halting,Sigma,OmegaIn,epsilon > .

  rl < P > => < P,epsilon > .
  rl < S,Sigma > => < S,Sigma,epsilon > .

  crl < let X = A in S,Sigma,OmegaIn > => < Sigma''[Sigma'(X) / X],OmegaIn'',OmegaOut >
   if < A,Sigma,OmegaIn > => < I,Sigma',OmegaIn' > /\ < S,Sigma'[I / X],OmegaIn' > => < Sigma'',OmegaIn'',OmegaOut > .
  crl < let X = A in S,Sigma,OmegaIn > => < halting,Sigma',OmegaIn',epsilon >
   if < A,Sigma,OmegaIn > => < error,Sigma',OmegaIn' > .
  crl < let X = A in S,Sigma,OmegaIn > => < halting,Sigma'',OmegaIn'',OmegaOut >
   if < A,Sigma,OmegaIn > => < I,Sigma',OmegaIn' > /\ < S,Sigma'[I / X],OmegaIn' > => < halting,Sigma'',OmegaIn'',OmegaOut > .

   crl < P,OmegaIn > => < Sigma,OmegaIn',OmegaOut >
    if < P, .State,OmegaIn > => < Sigma,OmegaIn',OmegaOut > .

endm
