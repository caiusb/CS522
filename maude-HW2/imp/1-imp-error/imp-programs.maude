mod IMP-PROGRAMS is including IMP-SYNTAX .
  ops sumPgm collatzPgm countPrimesPgm : -> Pgm .
  ops collatzStmt multiplicationStmt primalityStmt : -> Stmt .
  ops divByZeroStmt divByZeroInAddStmt divByZeroInLLEStmt divByZeroInRLEStmt divByZeroInAndLeftStmt divByZeroInAndRightStmt divByZeroInNegationStmt divByZeroInWhileConditionStmt divByZeroinWhileBodyStmt divByZeroInIfThenBranch divByZeroInIfElseBranch : ->  Stmt .
  op divByZeroPgm : -> Pgm .

  eq sumPgm = (
     int n, s ;
     n = 1 ;
     while (!(n <= 0)) {
       s = s + n ;
       n = n + -1 ;
     }    ) .

  eq collatzStmt = (
     while (!(n <= 1)) {
       s = s + 1 ;  q = n / 2 ;  r = q + q + 1 ;
       if (r <= n) { n = n + n + n + 1 ; } else { n = q ; }
     }     ) .

  eq collatzPgm = (
     int m, n, q, r, s ;
     m = 10 ;
     while (!(m <= 2)) {
       n = m ;
       m = m + -1 ;
       collatzStmt
     }     ) .

  eq multiplicationStmt = (        --- fast multiplication (base 2) algorithm
     z = 0 ;
     while (!(x <= 0)) {
       q = x / 2 ;
       r = q + q + 1 ;
       if (r <= x) { z = z + y ; } else {}
       x = q ;
       y = y + y ;
     }     ) .

  eq primalityStmt = (
     i = 2 ;  q = n / i ;  t = 1 ;
     while (i <= q && 1 <= t) {
       x = i ;
       y = q ;
       multiplicationStmt
       if (n <= z) { t = 0 ; } else { i = i + 1 ;  q = n / i ; }
     }     ) .

  eq countPrimesPgm = (
     int i, m, n, q, r, s, t, x, y, z ;
     m = 10 ;  n = 2 ;
     while (n <= m) {
       primalityStmt
       if (1 <= t) { s = s + 1 ; } else {}
       n = n + 1 ;
     }     ) .

  eq divByZeroStmt = (
    c = a / 0 ;
  ) .

  eq divByZeroInAddStmt = (
    c = 1 + 2 / 0 ;
  ) .

  eq divByZeroPgm = (
    int a, b, c ;
    a = 1 ; b = 0 ;
    c = a / b ;
  ) .

  eq divByZeroInLLEStmt = (
    if ( a <= 3 / 0) {} else {} 
  ) .

  eq divByZeroInRLEStmt = (
    if ( 3 / 0 <= a) {} else {} 
  ) .

  eq divByZeroInAndLeftStmt = (
    if ((a <= 3 / 0) && (a <= 1)) {} else {}
  ) .

  eq divByZeroInAndRightStmt = (
    if ((a <= 1) && (a <= 3 / 0)) {} else {} 
  ) .

  eq divByZeroInNegationStmt = (
    if ( ! (a <= 3 / 0)) {} else {}
  ) .

  eq divByZeroInWhileConditionStmt = (
    while ( a <= 3 / 0 ) {}
  ) .

  eq divByZeroinWhileBodyStmt = (
    while ( a <= 8 ) {
      a = a / 0 ;
    }
  ) .

  eq divByZeroInIfThenBranch = (
    if ( a <= 4 ) {
      a = a / 0 ;
    } else {}
  ) .

  eq divByZeroInIfElseBranch = (
    if ( a <= 0) {} else {
      a = a / 0 ;
    }
  ) .

endm
