mod IMP-CONFIGURATIONS-BIGSTEP is including IMP-SYNTAX + STATE .
  sort Configuration .
  op <_,_> : AExp State -> Configuration .
  op   <_> : Int -> Configuration .
  op <_,_> : BExp State -> Configuration .
  op   <_> : Bool -> Configuration .
  op <_,_> : Stmt State -> Configuration .
  op   <_> : State -> Configuration .
  op   <_> : Pgm -> Configuration .
endm

mod IMP-ERROR is including IMP-CONFIGURATIONS-BIGSTEP .
  op < error > : -> Configuration .
endm

mod IMP-SEMANTICS-BIGSTEP is including IMP-CONFIGURATIONS-BIGSTEP + IMP-ERROR .
  var X : Id .  var Xl : List{Id} .  var Sigma Sigma' Sigma1 Sigma2 : State .
  var I I1 I2 : Int .  var T : Bool .
  var A A1 A2 : AExp .  var B B1 B2 : BExp .  var S S1 S2 : Stmt .

---int and lookup
  rl < I,Sigma > => < I > .
 crl < X,Sigma > => < Sigma(X) >
  if Sigma(X) =/=Bool undefined .

---add
 crl < A1 + A2,Sigma > => < I1 +Int I2 > 
  if < A1,Sigma > => < I1 > /\ < A2,Sigma > => < I2 > .
 crl < A1 + A2,Sigma > => < error >
  if < A1, Sigma > => < error > .
 crl < A1 + A2,Sigma > => < error >
  if < A1,Sigma > => < I2 > /\ < A2,Sigma > => < error > .

---div
 crl < A1 / A2,Sigma > => < I1 /Int I2 > 
  if < A1,Sigma > => < I1 > /\ < A2,Sigma > => < I2 > /\ I2 =/=Bool 0 .
 crl < A1 / A2, Sigma > => < error >
  if < A2, Sigma > => < I2 > /\ I2 ==Bool 0 .

--- less than equal 
  rl < T,Sigma > => < T > .
 crl < A1 <= A2,Sigma > => < I1 <=Int I2 > 
  if < A1,Sigma > => < I1 > /\ < A2,Sigma > => < I2 > .
 crl < A1 <= A2,Sigma > => < error >
  if < A1,Sigma > => < error > .
 crl < A1 <= A2,Sigma > => < error >
  if < A1,Sigma > => < I2 > /\ < A2, Sigma > => < error > .

--- booleans
--- negation
 crl < ! B,Sigma > => < false > 
  if < B,Sigma > => <  true > .
 crl < ! B,Sigma > => < true > 
  if < B,Sigma > => < false > .
 crl < ! B,Sigma > => < error > 
  if < B,Sigma > => < error > .
--- and
 crl < B1 && B2,Sigma > => < false > 
  if < B1,Sigma > => < false > .
 crl < B1 && B2,Sigma > => < T > 
  if < B1,Sigma > => < true > /\ < B2,Sigma > => < T > .
 crl < B1 && B2,Sigma > => < error >
  if < B1,Sigma > => < error > .
 crl < B1 && B2,Sigma > => < error >
  if < B1,Sigma > => < true > /\ < B2,Sigma > => < error > .

--- blocks 
  rl < {},Sigma > => < Sigma > .
 crl < {S},Sigma > => < Sigma' >
  if < S,Sigma > => < Sigma' > .
 crl < {S},Sigma > => < error >
  if < S,Sigma > => < error > .

--- assign
 crl < X = A ;,Sigma > => < Sigma[I / X] >
  if < A,Sigma > => < I > /\ Sigma(X) =/=Bool undefined .
 crl < X = A ;,Sigma > => < error >
  if < A, Sigma > => < error > .

--- statement concat
 crl < S1 S2,Sigma > => < Sigma2 > 
  if < S1,Sigma > => < Sigma1 > /\ < S2,Sigma1 > => < Sigma2 > .
 crl < S1 S2,Sigma > => < error >
  if < S1, Sigma > => < error > .
 crl < S1 S2,Sigma > => < error > 
  if < S1, Sigma > => < Sigma1 > /\ < S2, Sigma1 > => < error > .

--- if
 crl < if (B) S1 else S2,Sigma > => < Sigma1 > 
  if < B,Sigma > => < true > /\ < S1,Sigma > => < Sigma1 > .
 crl < if (B) S1 else S2,Sigma > => < Sigma2 > 
  if < B,Sigma > => < false > /\ < S2,Sigma > => < Sigma2 > .
 crl < if (B) S1 else S2,Sigma > => < error >
  if < B,Sigma > => < error > .

--- while
 crl < while (B) S,Sigma > => < Sigma >
  if < B,Sigma > => < false > .
 crl < while (B) S,Sigma > => < Sigma' > 
  if < B,Sigma > => < true > /\ < S while (B) S,Sigma > => < Sigma' > .
 crl < while (B) S,Sigma > => < error >
  if < B,Sigma > => < error > .
 crl < while (B) S,Sigma > => < error >
  if < B,Sigma > => < true > /\ < S while (B) S,Sigma > => < error > .

--- program
 crl < int Xl ; S > => < Sigma >
  if < S,(Xl |-> 0) > => < Sigma > .
 crl < int Xl ; S > => < error >
  if < S, (Xl |-> 0) > => < error > .
endm
